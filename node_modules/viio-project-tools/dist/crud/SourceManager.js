"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SourceManager = void 0;
const CrudServiceManager_1 = require("./CrudServiceManager");
const SourceTypeManager_1 = require("./SourceTypeManager");
class SourceManager extends CrudServiceManager_1.CrudServiceManager {
    constructor(url) {
        super();
        this.url = url;
        this.sourceTypeManager = new SourceTypeManager_1.SourceTypeManager(url);
    }
    find(details) {
        return this.sendFinding(`${this.url}/sources?name=${details.name}`, details.config);
    }
    findById(id) {
        return this.sendFinding(`${this.url}/sources?id=${id.id}`, id.config);
    }
    create(details) {
        return __awaiter(this, void 0, void 0, function* () {
            if (details.type) {
                let sourceType = yield this.sourceTypeManager.findOrCreate({ type: details.type, config: details.config });
                if (sourceType)
                    return this.sendCreation(`${this.url}/sources`, {
                        sourceTypeId: sourceType.sourceTypeId,
                        name: details.name
                    }, details.config);
            }
            return undefined;
        });
    }
    modify(source) {
        return this.sendModification(`${this.url}/sources/${source.sourceId}`, { name: source.name, sourceTypeId: source.sourceTypeId }, source.config);
    }
    destroy(source) {
        return this.sendDestuction(`${this.url}/sources/${source.sourceId}`, source.config);
    }
}
exports.SourceManager = SourceManager;
//# sourceMappingURL=SourceManager.js.map