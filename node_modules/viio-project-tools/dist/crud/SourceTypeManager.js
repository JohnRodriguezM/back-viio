"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SourceTypeManager = void 0;
const CrudServiceManager_1 = require("./CrudServiceManager");
class SourceTypeManager extends CrudServiceManager_1.CrudServiceManager {
    constructor(url) {
        super();
        this.url = url;
    }
    find(details) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.sendFinding(`${this.url}/sourceTypes?type=${details.type}`, details.config);
        });
    }
    findById(id) {
        return this.sendFinding(`${this.url}/sourceTypes?id=${id.id}`, id.config);
    }
    create(details) {
        return this.sendCreation(`${this.url}/sourceTypes`, { type: details.type }, details.config);
    }
    modify(sourceType) {
        return this.sendModification(`${this.url}/sourceTypes/${sourceType.sourceTypeId}`, { type: sourceType.type }, sourceType.config);
    }
    destroy(sourceType) {
        return this.sendDestuction(`${this.url}/sourceTypes/${sourceType.sourceTypeId}`, sourceType.config);
    }
}
exports.SourceTypeManager = SourceTypeManager;
//# sourceMappingURL=SourceTypeManager.js.map