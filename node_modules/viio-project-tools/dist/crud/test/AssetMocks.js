"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.applyAssetMocks = void 0;
var assets = {};
function applyAssetMocks(mock) {
    mock.onGet(/\/assets\?id=[0-9]+/).reply((config) => {
        let searchedId = config.url ? config.url.split('id=')[1] : '';
        if (assets[searchedId])
            return [200, { result: [assets[searchedId]] }];
        return [200, { result: [] }];
    });
    mock.onGet(/\/assets\?ticker=[a-zA-Z_]+/).reply((config) => {
        let searchedTicker = config.url.split('ticker=')[1];
        for (let key of Object.keys(assets)) {
            if (assets[key].ticker == searchedTicker) {
                return [200, { result: [assets[key]] }];
            }
        }
        return [200, { result: [] }];
    });
    mock.onPost(/\/assets/).reply((config) => {
        let data = JSON.parse(config.data);
        for (let key of Object.keys(assets))
            if (assets[key].ticker === data.ticker)
                return [400, { status: 'Error', type: 'SequelizeUniqueConstraintError', error: 'Validation error' }];
        let item = Object.assign({ assetId: Object.keys(assets).length + 1 }, data);
        assets["" + item.assetId] = item;
        return [200, { items: [assets["" + item.assetId]] }];
    });
    mock.onPut(/\/assets\/[0-9]+/).reply((config) => {
        let assetId = config.url ? config.url.split('assets/')[1] : '';
        if (assets[assetId]) {
            let data = JSON.parse(config.data);
            assets[assetId] = Object.assign(Object.assign({}, assets[assetId]), data);
            return [200, { status: 'Ok', message: '1 items were updated' }];
        }
        return [200, { status: 'Ok', message: '0 items were updated' }];
    });
    mock.onDelete(/\/assets\/[0-9]+/).reply((config) => {
        let searchedAssetId = config.url ? config.url.split('assets/')[1] : '';
        for (let key of Object.keys(assets))
            if (assets[key].balanceId == parseInt(searchedAssetId))
                delete assets[key];
        return [200, { status: 'Ok', message: '1 items were deleted' }];
    });
}
exports.applyAssetMocks = applyAssetMocks;
//# sourceMappingURL=AssetMocks.js.map