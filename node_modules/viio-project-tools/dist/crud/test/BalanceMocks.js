"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.applyBalanceMocks = void 0;
var balances = {};
function applyBalanceMocks(mock) {
    mock.onGet(/\/balances\?id=[0-9]+/).reply((config) => {
        let searchedId = config.url ? config.url.split('id=')[1] : '';
        if (balances[searchedId])
            return [200, { result: [balances[searchedId]] }];
        return [200, { result: [] }];
    });
    mock.onGet(/\/balances\?userId=[0-9]+&assetId=[0-9]+/).reply((config) => {
        let searchedUserId = config.url ? config.url.split('userId=')[1].split('&assetId')[0] : '';
        for (let key of Object.keys(balances)) {
            if (balances[key].userId == searchedUserId) {
                return [200, { result: [balances[key]] }];
            }
        }
        return [200, { result: [] }];
    });
    mock.onPost(/\/balances/).reply((config) => {
        let data = JSON.parse(config.data);
        for (let key of Object.keys(balances))
            if (balances[key].userId === data.userId && balances[key].assetId === data.assetId)
                return [400, { status: 'Error', type: 'SequelizeUniqueConstraintError', error: 'Validation error' }];
        let item = { balanceId: Object.keys(balances).length + 1, userId: data.userId, assetId: data.assetId, balance: data.balance, temporalBalance: data.temporalBalance };
        balances["" + item.balanceId] = item;
        return [200, { items: [balances["" + item.balanceId]] }];
    });
    mock.onPut(/\/balances\/[0-9]+/).reply((config) => {
        let balanceId = config.url ? config.url.split('balances/')[1] : '';
        if (balances[balanceId]) {
            let data = JSON.parse(config.data);
            balances[balanceId] = Object.assign(Object.assign({}, balances[balanceId]), data);
            return [200, { status: 'Ok', message: '1 items were updated' }];
        }
        return [200, { status: 'Ok', message: '0 items were updated' }];
    });
    mock.onDelete(/\/balances\/[0-9]+/).reply((config) => {
        let searchedBalanceId = config.url ? config.url.split('balances/')[1] : '';
        for (let key of Object.keys(balances))
            if (balances[key].balanceId == parseInt(searchedBalanceId))
                delete balances[key];
        return [200, { status: 'Ok', message: '1 items were deleted' }];
    });
}
exports.applyBalanceMocks = applyBalanceMocks;
//# sourceMappingURL=BalanceMocks.js.map