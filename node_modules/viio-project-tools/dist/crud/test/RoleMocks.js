"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.applyRoleMocks = void 0;
var roles = {};
function applyRoleMocks(mock) {
    mock.onGet(/\/roles\?id=[a-zA-Z0-9]+/).reply((config) => {
        let searchedId = config.url ? config.url.split('id=')[1] : '';
        if (roles[searchedId])
            return [200, { result: [roles[searchedId]] }];
        return [200, { result: [] }];
    });
    mock.onGet(/\/roles\?role=[a-zA-Z0-9]+/).reply((config) => {
        let searchedRole = config.url ? config.url.split('role=')[1] : '';
        for (let key of Object.keys(roles))
            if (roles[key].role === searchedRole)
                return [200, { result: [roles[key]] }];
        return [200, { result: [] }];
    });
    mock.onPost(/\/roles/).reply((config) => {
        let data = JSON.parse(config.data);
        for (let key of Object.keys(roles))
            if (roles[key].role === data.role)
                return [400, { status: 'Error', type: 'SequelizeUniqueConstraintError', error: 'Validation error' }];
        let item = { roleId: Object.keys(roles).length + 1, role: data.role, permissions: data.permissions };
        roles["" + item.roleId] = item;
        return [200, { items: [roles["" + item.roleId]] }];
    });
    mock.onPut(/\/roles\/[0-9]+/).reply((config) => {
        let roleId = config.url ? config.url.split('roles/')[1] : '';
        if (roles[roleId]) {
            let data = JSON.parse(config.data);
            roles[roleId] = Object.assign(Object.assign({}, roles[roleId]), data);
            return [200, { status: 'Ok', message: '1 items were updated' }];
        }
        return [200, { status: 'Ok', message: '0 items were updated' }];
    });
    mock.onDelete(/\/roles\/[0-9]+/).reply((config) => {
        let searchedRoleId = config.url ? config.url.split('roles/')[1] : '';
        for (let key of Object.keys(roles))
            if (roles[key].roleId == parseInt(searchedRoleId))
                delete roles[key];
        return [200, { status: 'Ok', message: '1 items were deleted' }];
    });
}
exports.applyRoleMocks = applyRoleMocks;
//# sourceMappingURL=RoleMocks.js.map