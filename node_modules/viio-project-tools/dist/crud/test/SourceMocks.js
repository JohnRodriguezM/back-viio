"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.applySourceMocks = void 0;
var sources = {};
function applySourceMocks(mock) {
    mock.onGet(/\/sources\?id=[a-zA-Z0-9]+/).reply((config) => {
        let searchedId = config.url ? config.url.split('id=')[1] : '';
        if (sources[searchedId])
            return [200, { result: [sources[searchedId]] }];
        return [200, { result: [] }];
    });
    mock.onGet(/\/sources\?name=[a-zA-Z0-9]+/).reply((config) => {
        let searchedSource = config.url ? config.url.split('name=')[1] : '';
        for (let key of Object.keys(sources))
            if (sources[key].name === searchedSource)
                return [200, { result: [sources[key]] }];
        return [200, { result: [] }];
    });
    mock.onPost(/\/sources/).reply((config) => {
        let data = JSON.parse(config.data);
        for (let key of Object.keys(sources))
            if (sources[key].type === data.name)
                return [400, { status: 'Error', type: 'SequelizeUniqueConstraintError', error: 'Validation error' }];
        let item = { sourceId: Object.keys(sources).length + 1, name: data.name, sourceTypeId: data.sourceTypeId };
        sources["" + item.sourceId] = item;
        return [200, { items: [sources["" + item.sourceId]] }];
    });
    mock.onPut(/\/sources\/[0-9]+/).reply((config) => {
        let sourceId = config.url ? config.url.split('sources/')[1] : '';
        if (sources[sourceId]) {
            let data = JSON.parse(config.data);
            sources[sourceId] = Object.assign(Object.assign({}, sources[sourceId]), data);
            return [200, { status: 'Ok', message: '1 items were updated' }];
        }
        return [200, { status: 'Ok', message: '0 items were updated' }];
    });
    mock.onDelete(/\/sources\/[0-9]+/).reply((config) => {
        let searchedSourceId = config.url ? config.url.split('sources/')[1] : '';
        for (let key of Object.keys(sources))
            if (sources[key].sourceId == parseInt(searchedSourceId))
                delete sources[key];
        return [200, { status: 'Ok', message: '1 items were deleted' }];
    });
}
exports.applySourceMocks = applySourceMocks;
//# sourceMappingURL=SourceMocks.js.map