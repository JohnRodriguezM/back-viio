"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.applySourceTypeMocks = void 0;
var sourceTypes = {};
function applySourceTypeMocks(mock) {
    mock.onGet(/\/sourceTypes\?id=[a-zA-Z0-9]+/).reply((config) => {
        let searchedId = config.url ? config.url.split('id=')[1] : '';
        if (sourceTypes[searchedId])
            return [200, { result: [sourceTypes[searchedId]] }];
        return [200, { result: [] }];
    });
    mock.onGet(/\/sourceTypes\?type=[a-zA-Z0-9]+/).reply((config) => {
        let searchedType = config.url ? config.url.split('type=')[1] : '';
        for (let key of Object.keys(sourceTypes))
            if (sourceTypes[key].type === searchedType)
                return [200, { result: [sourceTypes[key]] }];
        return [200, { result: [] }];
    });
    mock.onPost(/\/sourceTypes/).reply((config) => {
        let data = JSON.parse(config.data);
        for (let key of Object.keys(sourceTypes))
            if (sourceTypes[key].type === data.type)
                return [400, { status: 'Error', type: 'SequelizeUniqueConstraintError', error: 'Validation error' }];
        let item = { sourceTypeId: Object.keys(sourceTypes).length + 1, type: data.type };
        sourceTypes["" + item.sourceTypeId] = item;
        return [200, { items: [sourceTypes["" + item.sourceTypeId]] }];
    });
    mock.onPut(/\/sourceTypes\/[0-9]+/).reply((config) => {
        let sourceTypeId = config.url ? config.url.split('sourceTypes/')[1] : '';
        if (sourceTypes[sourceTypeId]) {
            let data = JSON.parse(config.data);
            sourceTypes[sourceTypeId] = Object.assign(Object.assign({}, sourceTypes[sourceTypeId]), data);
            return [200, { status: 'Ok', message: '1 items were updated' }];
        }
        return [200, { status: 'Ok', message: '0 items were updated' }];
    });
    mock.onDelete(/\/sourceTypes\/[0-9]+/).reply((config) => {
        let searchedTypeId = config.url ? config.url.split('sourceTypes/')[1] : '';
        for (let key of Object.keys(sourceTypes))
            if (sourceTypes[key].sourceTypeId == parseInt(searchedTypeId))
                delete sourceTypes[key];
        return [200, { status: 'Ok', message: '1 items were deleted' }];
    });
}
exports.applySourceTypeMocks = applySourceTypeMocks;
//# sourceMappingURL=SourceTypeMocks.js.map