"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.applyTransactionStatusMocks = void 0;
var transactionStatus = {};
function applyTransactionStatusMocks(mock) {
    mock.onGet(/\/transactionStatus\?id=[a-zA-Z0-9]+/).reply((config) => {
        let searchedId = config.url ? config.url.split('id=')[1] : '';
        if (transactionStatus[searchedId])
            return [200, { result: [transactionStatus[searchedId]] }];
        return [200, { result: [] }];
    });
    mock.onGet(/\/transactionStatus\?status=[a-zA-Z0-9]+/).reply((config) => {
        let searchedStatus = config.url ? config.url.split('status=')[1] : '';
        for (let key of Object.keys(transactionStatus))
            if (transactionStatus[key].status === searchedStatus)
                return [200, { result: [transactionStatus[key]] }];
        return [200, { result: [] }];
    });
    mock.onPost(/\/transactionStatus/).reply((config) => {
        let data = JSON.parse(config.data);
        for (let key of Object.keys(transactionStatus))
            if (transactionStatus[key].status === data.status)
                return [400, { status: 'Error', type: 'SequelizeUniqueConstraintError', error: 'Validation error' }];
        let item = { transactionStatusId: Object.keys(transactionStatus).length + 1, status: data.status, description: data.description };
        transactionStatus["" + item.transactionStatusId] = item;
        return [200, { items: [transactionStatus["" + item.transactionStatusId]] }];
    });
    mock.onPut(/\/transactionStatus\/[0-9]+/).reply((config) => {
        let transactionStatusId = config.url ? config.url.split('transactionStatus/')[1] : '';
        if (transactionStatus[transactionStatusId]) {
            let data = JSON.parse(config.data);
            transactionStatus[transactionStatusId] = Object.assign(Object.assign({}, transactionStatus[transactionStatusId]), data);
            return [200, { status: 'Ok', message: '1 items were updated' }];
        }
        return [200, { status: 'Ok', message: '0 items were updated' }];
    });
    mock.onDelete(/\/transactionStatus\/[0-9]+/).reply((config) => {
        let searchedTransactionStatusId = config.url ? config.url.split('transactionStatus/')[1] : '';
        for (let key of Object.keys(transactionStatus))
            if (transactionStatus[key].transactionStatusId == parseInt(searchedTransactionStatusId))
                delete transactionStatus[key];
        return [200, { status: 'Ok', message: '1 items were deleted' }];
    });
}
exports.applyTransactionStatusMocks = applyTransactionStatusMocks;
//# sourceMappingURL=TransactionStatusMocks.js.map