"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.applyTransactionTypeMocks = void 0;
var transactionType = {};
function applyTransactionTypeMocks(mock) {
    mock.onGet(/\/transactionTypes\?id=[a-zA-Z0-9]+/).reply((config) => {
        let searchedId = config.url ? config.url.split('id=')[1] : '';
        if (transactionType[searchedId])
            return [200, { result: [transactionType[searchedId]] }];
        return [200, { result: [] }];
    });
    mock.onGet(/\/transactionTypes\?type=[a-zA-Z0-9]+/).reply((config) => {
        let searchedType = config.url ? config.url.split('type=')[1] : '';
        for (let key of Object.keys(transactionType))
            if (transactionType[key].type === searchedType)
                return [200, { result: [transactionType[key]] }];
        return [200, { result: [] }];
    });
    mock.onPost(/\/transactionTypes/).reply((config) => {
        let data = JSON.parse(config.data);
        for (let key of Object.keys(transactionType))
            if (transactionType[key].type === data.type)
                return [400, { status: 'Error', type: 'SequelizeUniqueConstraintError', error: 'Validation error' }];
        let item = { transactionTypeId: Object.keys(transactionType).length + 1, type: data.type, description: data.description };
        transactionType["" + item.transactionTypeId] = item;
        return [200, { items: [transactionType["" + item.transactionTypeId]] }];
    });
    mock.onPut(/\/transactionTypes\/[0-9]+/).reply((config) => {
        let transactionTypeId = config.url ? config.url.split('transactionTypes/')[1] : '';
        if (transactionType[transactionTypeId]) {
            let data = JSON.parse(config.data);
            transactionType[transactionTypeId] = Object.assign(Object.assign({}, transactionType[transactionTypeId]), data);
            return [200, { status: 'Ok', message: '1 items were updated' }];
        }
        return [200, { status: 'Ok', message: '0 items were updated' }];
    });
    mock.onDelete(/\/transactionTypes\/[0-9]+/).reply((config) => {
        let searchedtransactionTypeId = config.url ? config.url.split('transactionTypes/')[1] : '';
        for (let key of Object.keys(transactionType))
            if (transactionType[key].transactionTypeId == parseInt(searchedtransactionTypeId))
                delete transactionType[key];
        return [200, { status: 'Ok', message: '1 items were deleted' }];
    });
}
exports.applyTransactionTypeMocks = applyTransactionTypeMocks;
//# sourceMappingURL=TransactionTypeMocks.js.map